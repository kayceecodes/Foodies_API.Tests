<?xml version="1.0"?>
<doc>
    <assembly>
        <name>foodies_api</name>
    </assembly>
    <members>
        <member name="T:foodies_api.Migrations.initial">
            <inheritdoc />
        </member>
        <member name="M:foodies_api.Migrations.initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:foodies_api.Migrations.initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:foodies_api.Migrations.initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:foodies_api.Repositories.BusinessRepository">
            <summary>
            Provides repository methods for managing business entities in the database.
            </summary>
        </member>
        <member name="M:foodies_api.Repositories.BusinessRepository.#ctor(foodies_api.Data.AppDbContext)">
            <summary>
            Provides repository methods for managing business entities in the database.
            </summary>
        </member>
        <member name="M:foodies_api.Repositories.BusinessRepository.AddBusiness(foodies_api.Models.Entities.Business)">
            <summary>
            Adds a new business to the database.
            </summary>
            <param name="business">The <see cref="T:foodies_api.Models.Entities.Business"/> object containing the business details to add.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the added business if successful, 
            or an error message and exception if the operation fails.
            </returns>
        </member>
        <member name="T:foodies_api.Repositories.UsersLikeBusinessesRepository">
            <summary>
            Provides repository methods for managing user-business like relationships in the database.
            </summary>
        </member>
        <member name="M:foodies_api.Repositories.UsersLikeBusinessesRepository.AddUserLikes(foodies_api.Models.Entities.UserLikeBusiness)">
            <summary>
            Adds a new user-business like relationship to the database.
            </summary>
            <param name="userLike">The <see cref="T:foodies_api.Models.Entities.UserLikeBusiness"/> object containing the user-business like details to add.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the added user-business like relationship if successful
            </returns>
        </member>
        <member name="M:foodies_api.Repositories.UsersLikeBusinessesRepository.RemoveUserLikes(System.Guid,System.String)">
            <summary>
            Removes a user-business like relationship from the database.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <param name="businessId">The unique identifier of the business.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the removed user-business like relationship if successful
            </returns>
        </member>
        <member name="M:foodies_api.Repositories.UsersLikeBusinessesRepository.GetUserLikesByUserId(System.Guid)">
            <summary>
            Retrieves all user-business like relationships for a specific user.
            </summary>
            <param name="userId">The unique identifier of the user.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing a list of user-business like relationships if successful
            </returns>
        </member>
        <member name="T:foodies_api.Repositories.UsersRepository">
            <summary>
            Provides repository methods for managing user entities in the database.
            </summary>
        </member>
        <member name="M:foodies_api.Repositories.UsersRepository.GetAllUsers">
            <summary>
            Retrieves a list of all users from the database.
            </summary>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing a list of users if successful
            </returns>
        </member>
        <member name="M:foodies_api.Repositories.UsersRepository.GetUserById(System.Guid)">
            <summary>
            Retrieves a user by their unique identifier.
            </summary>
            <param name="userId">The unique identifier of the user to retrieve.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the user if found
            </returns>
        </member>
        <member name="M:foodies_api.Repositories.UsersRepository.DeleteUserById(System.Guid)">
            <summary>
            Deletes a user by their unique identifier.
            </summary>
            <param name="userId">The unique identifier of the user to delete.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the deleted user if successful, 
            </returns>
            <exception cref="T:System.Exception">Thrown if the user does not exist.</exception>
        </member>
        <member name="M:foodies_api.Repositories.UsersRepository.UpdateUser(System.Guid,foodies_api.Models.Dtos.Requests.UserUpdateRequest)">
            <summary>
            Updates a user's information in the database.
            </summary>
            <param name="userId">The unique identifier of the user to update.</param>
            <param name="request">The <see cref="T:foodies_api.Models.Dtos.Requests.UserUpdateRequest"/> containing the updated user information.</param>
            <returns>
            A <see cref="T:foodies_api.Models.Dtos.Responses.RepositoryResponse`1"/> containing the updated user if successful
            </returns>
        </member>
        <member name="T:foodies_api.Services.BusinessService">
            <summary>
            Provides services for managing businesses, including adding, retrieving, and updating business data.
            </summary>
        </member>
        <member name="M:foodies_api.Services.BusinessService.AddBusiness(foodies_api.Models.Dtos.Responses.GetBusinessResponse)">
            <summary>
            Adds a new business to the system.
            </summary>
            <param name="business">The <see cref="T:foodies_api.Models.Dtos.Responses.GetBusinessResponse"/> object containing the business details to add.</param>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing the added business if successful, 
            or an error message and status code if the operation fails.
            </returns>
        </member>
        <member name="T:foodies_api.Services.FoodiesYelpService">
            <summary>
            Provides services for interacting with the Yelp API to retrieve business information.
            </summary>
        </member>
        <member name="M:foodies_api.Services.FoodiesYelpService.GetBusinessById(System.String)">
            <summary>
            Retrieves a business by its unique identifier from the Yelp API.
            </summary>
            <param name="businessId">The unique identifier of the business to retrieve.</param>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing the business details if successful, 
            or an error message and status code if the operation fails.
            </returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Thrown if the HTTP request to the Yelp API fails.</exception>
        </member>
        <member name="T:foodies_api.Services.UsersService">
            <summary>
            Provides services for managing users, including retrieving, updating, and deleting user data.
            </summary>
        </member>
        <member name="M:foodies_api.Services.UsersService.GetAllUsers">
            <summary>
            Retrieves a list of all users.
            </summary>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing a list of users if successful, 
            </returns>
        </member>
        <member name="M:foodies_api.Services.UsersService.GetUserById(System.Guid)">
            <summary>
            Retrieves a user by their unique identifier.  
            </summary>
            <param name="userId">The unique identifier of the user to retrieve.</param>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing the user if found
            </returns>
        </member>
        <member name="M:foodies_api.Services.UsersService.DeleteUserById(System.Guid)">
            <summary>
            Deletes a user by their unique identifier.
            </summary>
            <param name="userId">The unique identifier of the user to delete.</param>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing the deleted user if successful
            </returns>
        </member>
        <member name="M:foodies_api.Services.UsersService.UpdateUser(System.Guid,foodies_api.Models.Dtos.Requests.UserUpdateRequest)">
            <summary>
            Updates a user's information.
            </summary>
            <param name="userId">The unique identifier of the user to update.</param>
            <param name="request">The <see cref="T:foodies_api.Models.Dtos.Requests.UserUpdateRequest"/> containing the updated user information.</param>
            <returns>
            An <see cref="T:foodies_api.Models.ApiResult`1"/> containing the updated user if successful
            </returns>
        </member>
    </members>
</doc>
